// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gammaLogLikelihood
double gammaLogLikelihood(double x, double shape, double rate);
RcppExport SEXP _BatchMixtureModel_gammaLogLikelihood(SEXP xSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(gammaLogLikelihood(x, shape, rate));
    return rcpp_result_gen;
END_RCPP
}
// invGammaLogLikelihood
double invGammaLogLikelihood(double x, double shape, double scale);
RcppExport SEXP _BatchMixtureModel_invGammaLogLikelihood(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(invGammaLogLikelihood(x, shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// wishartLogLikelihood
double wishartLogLikelihood(arma::mat X, arma::mat V, double n, arma::uword P);
RcppExport SEXP _BatchMixtureModel_wishartLogLikelihood(SEXP XSEXP, SEXP VSEXP, SEXP nSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(wishartLogLikelihood(X, V, n, P));
    return rcpp_result_gen;
END_RCPP
}
// invWishartLogLikelihood
double invWishartLogLikelihood(arma::mat X, arma::mat Psi, double nu, arma::uword P);
RcppExport SEXP _BatchMixtureModel_invWishartLogLikelihood(SEXP XSEXP, SEXP PsiSEXP, SEXP nuSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(invWishartLogLikelihood(X, Psi, nu, P));
    return rcpp_result_gen;
END_RCPP
}
// sampleMVN
Rcpp::List sampleMVN(arma::mat X, arma::uword K, arma::uword B, arma::uvec labels, arma::uvec batch_vec, double mu_proposal_window, double cov_proposal_window, double m_proposal_window, double S_proposal_window, arma::uword R, arma::uword thin, arma::vec concentration);
RcppExport SEXP _BatchMixtureModel_sampleMVN(SEXP XSEXP, SEXP KSEXP, SEXP BSEXP, SEXP labelsSEXP, SEXP batch_vecSEXP, SEXP mu_proposal_windowSEXP, SEXP cov_proposal_windowSEXP, SEXP m_proposal_windowSEXP, SEXP S_proposal_windowSEXP, SEXP RSEXP, SEXP thinSEXP, SEXP concentrationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type batch_vec(batch_vecSEXP);
    Rcpp::traits::input_parameter< double >::type mu_proposal_window(mu_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type cov_proposal_window(cov_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type m_proposal_window(m_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type S_proposal_window(S_proposal_windowSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type concentration(concentrationSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleMVN(X, K, B, labels, batch_vec, mu_proposal_window, cov_proposal_window, m_proposal_window, S_proposal_window, R, thin, concentration));
    return rcpp_result_gen;
END_RCPP
}
// sampleMVT
Rcpp::List sampleMVT(arma::mat X, arma::uword K, arma::uword B, arma::uvec labels, arma::uvec batch_vec, double mu_proposal_window, double cov_proposal_window, double m_proposal_window, double S_proposal_window, double t_df_proposal_window, arma::uword R, arma::uword thin, arma::vec concentration);
RcppExport SEXP _BatchMixtureModel_sampleMVT(SEXP XSEXP, SEXP KSEXP, SEXP BSEXP, SEXP labelsSEXP, SEXP batch_vecSEXP, SEXP mu_proposal_windowSEXP, SEXP cov_proposal_windowSEXP, SEXP m_proposal_windowSEXP, SEXP S_proposal_windowSEXP, SEXP t_df_proposal_windowSEXP, SEXP RSEXP, SEXP thinSEXP, SEXP concentrationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type batch_vec(batch_vecSEXP);
    Rcpp::traits::input_parameter< double >::type mu_proposal_window(mu_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type cov_proposal_window(cov_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type m_proposal_window(m_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type S_proposal_window(S_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type t_df_proposal_window(t_df_proposal_windowSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type concentration(concentrationSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleMVT(X, K, B, labels, batch_vec, mu_proposal_window, cov_proposal_window, m_proposal_window, S_proposal_window, t_df_proposal_window, R, thin, concentration));
    return rcpp_result_gen;
END_RCPP
}
// sampleSemisupervisedMVN
Rcpp::List sampleSemisupervisedMVN(arma::mat X, arma::uword K, arma::uword B, arma::uvec labels, arma::uvec batch_vec, arma::uvec fixed, double mu_proposal_window, double cov_proposal_window, double m_proposal_window, double S_proposal_window, arma::uword R, arma::uword thin, arma::vec concentration);
RcppExport SEXP _BatchMixtureModel_sampleSemisupervisedMVN(SEXP XSEXP, SEXP KSEXP, SEXP BSEXP, SEXP labelsSEXP, SEXP batch_vecSEXP, SEXP fixedSEXP, SEXP mu_proposal_windowSEXP, SEXP cov_proposal_windowSEXP, SEXP m_proposal_windowSEXP, SEXP S_proposal_windowSEXP, SEXP RSEXP, SEXP thinSEXP, SEXP concentrationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type batch_vec(batch_vecSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< double >::type mu_proposal_window(mu_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type cov_proposal_window(cov_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type m_proposal_window(m_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type S_proposal_window(S_proposal_windowSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type concentration(concentrationSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleSemisupervisedMVN(X, K, B, labels, batch_vec, fixed, mu_proposal_window, cov_proposal_window, m_proposal_window, S_proposal_window, R, thin, concentration));
    return rcpp_result_gen;
END_RCPP
}
// sampleSemisupervisedMVT
Rcpp::List sampleSemisupervisedMVT(arma::mat X, arma::uword K, arma::uword B, arma::uvec labels, arma::uvec batch_vec, arma::uvec fixed, double mu_proposal_window, double cov_proposal_window, double m_proposal_window, double S_proposal_window, double t_df_proposal_window, arma::uword R, arma::uword thin, arma::vec concentration);
RcppExport SEXP _BatchMixtureModel_sampleSemisupervisedMVT(SEXP XSEXP, SEXP KSEXP, SEXP BSEXP, SEXP labelsSEXP, SEXP batch_vecSEXP, SEXP fixedSEXP, SEXP mu_proposal_windowSEXP, SEXP cov_proposal_windowSEXP, SEXP m_proposal_windowSEXP, SEXP S_proposal_windowSEXP, SEXP t_df_proposal_windowSEXP, SEXP RSEXP, SEXP thinSEXP, SEXP concentrationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type batch_vec(batch_vecSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< double >::type mu_proposal_window(mu_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type cov_proposal_window(cov_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type m_proposal_window(m_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type S_proposal_window(S_proposal_windowSEXP);
    Rcpp::traits::input_parameter< double >::type t_df_proposal_window(t_df_proposal_windowSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type concentration(concentrationSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleSemisupervisedMVT(X, K, B, labels, batch_vec, fixed, mu_proposal_window, cov_proposal_window, m_proposal_window, S_proposal_window, t_df_proposal_window, R, thin, concentration));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_BatchMixtureModel_gammaLogLikelihood", (DL_FUNC) &_BatchMixtureModel_gammaLogLikelihood, 3},
    {"_BatchMixtureModel_invGammaLogLikelihood", (DL_FUNC) &_BatchMixtureModel_invGammaLogLikelihood, 3},
    {"_BatchMixtureModel_wishartLogLikelihood", (DL_FUNC) &_BatchMixtureModel_wishartLogLikelihood, 4},
    {"_BatchMixtureModel_invWishartLogLikelihood", (DL_FUNC) &_BatchMixtureModel_invWishartLogLikelihood, 4},
    {"_BatchMixtureModel_sampleMVN", (DL_FUNC) &_BatchMixtureModel_sampleMVN, 12},
    {"_BatchMixtureModel_sampleMVT", (DL_FUNC) &_BatchMixtureModel_sampleMVT, 13},
    {"_BatchMixtureModel_sampleSemisupervisedMVN", (DL_FUNC) &_BatchMixtureModel_sampleSemisupervisedMVN, 13},
    {"_BatchMixtureModel_sampleSemisupervisedMVT", (DL_FUNC) &_BatchMixtureModel_sampleSemisupervisedMVT, 14},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BatchMixtureModel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
